(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{314:function(e,t,r){"use strict";r.r(t);var n=r(14),i=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"design-principles-in-software-development"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#design-principles-in-software-development"}},[e._v("#")]),e._v(" Design Principles in Software Development")]),e._v(" "),t("h2",{attrs:{id:"solid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solid"}},[e._v("#")]),e._v(" SOLID")]),e._v(" "),t("p",[t("strong",[e._v("Sources")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://en.wikipedia.org/wiki/SOLID",target:"_blank",rel:"noopener noreferrer"}},[e._v("en.wikipedia.org/wiki/SOLID"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://principles-wiki.net/collections:robert_c._martin_s_principle_collection",target:"_blank",rel:"noopener noreferrer"}},[e._v("principles-wiki.net/collections:robert_c._martin_s_principle_collection"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"single-responsibility-principle-srp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#single-responsibility-principle-srp"}},[e._v("#")]),e._v(" Single-responsibility principle (SRP)")]),e._v(" "),t("p",[e._v('There should never be more than one reason for a class to change." In other words, every class should have only one responsibility')]),e._v(" "),t("p",[e._v("Signs that will help you understand that the principle is violated:")]),e._v(" "),t("ul",[t("li",[e._v("Unintentional duplication, when changes in one method affect another method result.")]),e._v(" "),t("li",[e._v("A sign of a merger.")])]),e._v(" "),t("p",[e._v("To understand and solve problems with it, think about actors / users of methods. We should split a code for different actors.")]),e._v(" "),t("p",[t("strong",[e._v("Bad")]),e._v(" example:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Employe")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("+ calculatePay "),t("br"),e._v(" + reportHours "),t("br"),e._v(" + save")])])])]),e._v(" "),t("p",[e._v("To understand and solve problems with it, think about actors / users of methods. We should split a code for different actors.")]),e._v(" "),t("p",[t("strong",[e._v("Good")]),e._v(' example:\nPattern "Facade".')]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Employe Facade")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("+ calculatePay "),t("br"),e._v(" + reportHours "),t("br"),e._v(" + save")])])])]),e._v(" "),t("p",[e._v("↓     ↓     ↓")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("PayCalculator")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("+ calculatePay")])])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("HourReporter")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("+ reportHours")])])])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("EmployeeSaver")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("+ saveEmployee")])])])]),e._v(" "),t("p",[e._v("↓")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Employee Data")])])]),e._v(" "),t("tbody")]),e._v(" "),t("br"),e._v("\nExample in JavaScript:\n"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//Bad\n\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n  }\n\n  changeSettings(settings) {\n    if (this.verifyCredentials()) {\n      // ...\n    }\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n\n//Good\n\nclass UserAuth {\n  constructor(user) {\n    this.user = user;\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n")])])]),t("h3",{attrs:{id:"open-closed-principle-ocp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#open-closed-principle-ocp"}},[e._v("#")]),e._v(" Open / Closed Principle (OCP)")]),e._v(" "),t("p",[e._v("//")]),e._v(" "),t("h3",{attrs:{id:"liskov-substitution-principle-lsp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#liskov-substitution-principle-lsp"}},[e._v("#")]),e._v(" Liskov Substitution Principle (LSP)")]),e._v(" "),t("p",[e._v("//")]),e._v(" "),t("h3",{attrs:{id:"interface-segregation-principle-isp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interface-segregation-principle-isp"}},[e._v("#")]),e._v(" Interface Segregation Principle (ISP)")]),e._v(" "),t("p",[e._v("//")]),e._v(" "),t("h3",{attrs:{id:"dependency-inversion-principle-dip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dependency-inversion-principle-dip"}},[e._v("#")]),e._v(" Dependency Inversion Principle (DIP)")]),e._v(" "),t("p",[e._v("//")])])}),[],!1,null,null,null);t.default=i.exports}}]);